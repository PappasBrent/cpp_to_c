#pragma once

#include <string>
#include <map>

// Headers for dumping transformation stats to CSV
std::string
    TopLevelExpansionsInMainFile = "Total Expansions In Main File",
    TopLevelObjectLikeMacroExpansionsInMainFile = "OLM Expansions",
    TopLevelFunctionLikeMacroExpansionsInMainFile = "FLM Expansions",
    TopLevelExpansionsWithNoExpansionRoot = "No Expansion Root",
    TopLevelExpansionsWithNestedExpansions = "Has Nested Expansions",
    TopLevelExpansionsWithMultipleASTNodes = "Multiple AST Nodes",
    TopLevelExpansionsWithAmbiguousSignature = "Ambiguous Signature",
    TopLevelExpansionsThatDidNotExpandToAnExpression = "Did not Expand to an Expression",
    TopLevelExpansionsWithUnalignedBody = "Unaligned Body",
    TopLevelExpansionsWithExpressionEndNotAtEndOfExpansion = "Expression End not Expansion End",
    TopLevelExpansionsOfMultiplyOrRedefinedDefinedMacros = "Multiply/Redefined Macro Expansions",
    MultiplyOrRedefinedOLMExpansions = "Multiply/Redefined OLM Expansions",
    MultiplyOrRedefinedFLMExpansions = "Multiply/Redefined FLM Expansions",
    TopLevelExpansionsWithUnexpandedArgument = "Unexpanded Argument",
    TopLevelExpansionsWithMismatchingArgumentExpansionsAndASTNodes = "Mismatching Argument Expansions and AST Nodes",
    TopLevelExpansionsWithInconsistentArgumentExpansions = "Inconsistent Argument Expansions",
    TopLevelExpansionsWithArgumentsWhoseASTNodesHaveSpellingLocationsNotInArgumentTokenRanges = "Argument AST Nodes have Spelling Locations not in Argument Token Ranges",
    TopLevelExpansionsWithLocalVarsInBody = "Contains Local Vars Expanded From Macro Body",
    TopLevelExpansionsWithSideEffects = "Side-effects",
    TopLevelOLMExpansionsWithSideEffects = "OLM Expansions with Side-effects",
    TopLevelFLMExpansionsWithSideEffects = "FLM Expansions with Side-effects",
    TransformedTopLevelExpansions = "Total Transformed Expansions",
    TransformedTopLevelObjectLikeMacroExpansions = "Transformed OLM Expansions",
    TransformedTopLevelFunctionLikeMacroExpansions = "Transformed FLM Expansions",
    UntransformedTopLevelExpansions = "Total Untransformed Expansions",
    UntransformedTopLevelObjectLikeMacroExpansions = "Untransformed OLM Expansions",
    UntransformedTopLevelFunctionLikeMacroExpansions = "Untransformed FLM Expansions",
    TopLevelExpansionsContainingGlobalVarDeclaredInMacroInMainFile = "Contains Global Var Declared Inside Macro Inside Main File",
    TransformationTime = "Transformation Time (ms)",
    FileSize = "File Size (bytes)",
    DedupedDefinitions = "Deduped Transformed Definitions",
    EmittedDefinitions = "Emitted Transformed Definitions",
    ConstExprExpansionsFound = "Constant Expression Required",
    TopLevelExpansionsWithAddressOf = "Contains Address Of (&)",
    TopLevelExpansionsContainingGlobalVarsNotDeclaredInDirectlyIncludedFile = "Contains Global Var Not Declared In Directly Included File",
    TopLevelExpansionsTransformedToVarWithCallInInitializer = "Would be Transformed to Global Var with Call in Initializer",
    TopLevelExpansionsWithArrayTypesInSignature = "Array Type in Signature",
    TopLevelExpansionsTransformedToVarWithNullOrVoidType = "Would be Transformed to Var with Null or Void Type",
    TopLevelExpansionsTransformedToFunctionCallUsedAsLHSOfAssign = "Would be Transformed to a Function Call on the LHS of an Assignment",
    TopLevelExpansionsTransformedToFunctionCallAsOperandOfDecOrInc = "Would be Transformed to a Function Call as Operand of Dec or Inc",
    TopLevelExpansionsTransformedToFunctionCallAsOperandOfAddressOf = "Would be Transformed to a Function Call as Operand of Address Of",
    TopLevelExpansionsWithFunctionPointerType = "Has Function Pointer Type",
    TopLevelExpansionsToStringLiteral = "Expanded to String Literal",
    TransformationLocationNotRewritable = "Transformation Location not Rewritable",
    TopLevelExpansionsThatWriteToRValueFromSymbolInArgument = "Writes to R-value from Symbol in Arguments",
    TopLevelExpansionsThatReadFromLValueFromSymbolInArgument = "Reads from L-value from Symbol in Arguments",
    EmittedOLMDefinitions = "Emitted OLM Transformed Definitions",
    EmittedFLMDefinitions = "Emitted FLM Transformed Definitions",
    DedupedOLMDefinitions = "Deduped OLM Transformed Definitions",
    DedupedFLMDefinitions = "Deduped FLM Transformed Definitions",
    TopLevelUnhygienicExpansions = "Unhygienic Expansions",
    UnhygienicOLMs = "Unhygienic OLMs",
    UnhygienicFLMs = "Unhygienic FLMs",
    OLMsWithLocalVarsInBody = "OLMs With Local Vars In Body",
    FLMsWithLocalVarsInBody = "FLMs With Local Vars In Body",
    HygienicExpansions = "Hygienic Expansions",
    HygienicOLMExpansions = "Hygienic OLM Expansions",
    HygienicFLMExpansions = "Hygienic FLM Expansions",
    TransformedTopLevelExpansionsWithSideEffects = "Transformed Expansions With Side-effects",
    TransformedOLMExpansionsWithSideEffects = "Transformed OLM Expansions With Side-effects",
    TransformedFLMExpansionsWithSideEffects = "Transformed FLM Expansions With Side-effects";

std::map<string, unsigned> NewTransformationStats()
{
    // Map for recording transformation statistics
    string CSVHeaders[] = {
        TopLevelExpansionsInMainFile,
        TopLevelObjectLikeMacroExpansionsInMainFile,
        TopLevelFunctionLikeMacroExpansionsInMainFile,
        TopLevelExpansionsWithNoExpansionRoot,
        TopLevelExpansionsWithNestedExpansions,
        TopLevelExpansionsWithMultipleASTNodes,
        TopLevelExpansionsWithAmbiguousSignature,
        TopLevelExpansionsThatDidNotExpandToAnExpression,
        TopLevelExpansionsWithUnalignedBody,
        TopLevelExpansionsWithExpressionEndNotAtEndOfExpansion,
        TopLevelExpansionsOfMultiplyOrRedefinedDefinedMacros,
        MultiplyOrRedefinedOLMExpansions,
        MultiplyOrRedefinedFLMExpansions,
        TopLevelExpansionsWithUnexpandedArgument,
        TopLevelExpansionsWithMismatchingArgumentExpansionsAndASTNodes,
        TopLevelExpansionsWithInconsistentArgumentExpansions,
        TopLevelExpansionsWithArgumentsWhoseASTNodesHaveSpellingLocationsNotInArgumentTokenRanges,
        TopLevelExpansionsWithLocalVarsInBody,
        TopLevelExpansionsWithSideEffects,
        TopLevelOLMExpansionsWithSideEffects,
        TopLevelFLMExpansionsWithSideEffects,
        TransformedTopLevelExpansions,
        TransformedTopLevelObjectLikeMacroExpansions,
        TransformedTopLevelFunctionLikeMacroExpansions,
        UntransformedTopLevelExpansions,
        UntransformedTopLevelObjectLikeMacroExpansions,
        UntransformedTopLevelFunctionLikeMacroExpansions,
        TopLevelExpansionsContainingGlobalVarDeclaredInMacroInMainFile,
        TransformationTime,
        FileSize,
        DedupedDefinitions,
        EmittedDefinitions,
        ConstExprExpansionsFound,
        TopLevelExpansionsWithAddressOf,
        TopLevelExpansionsContainingGlobalVarsNotDeclaredInDirectlyIncludedFile,
        TopLevelExpansionsTransformedToVarWithCallInInitializer,
        TopLevelExpansionsWithArrayTypesInSignature,
        TopLevelExpansionsTransformedToVarWithNullOrVoidType,
        TopLevelExpansionsTransformedToFunctionCallUsedAsLHSOfAssign,
        TopLevelExpansionsTransformedToFunctionCallAsOperandOfDecOrInc,
        TopLevelExpansionsTransformedToFunctionCallAsOperandOfAddressOf,
        TopLevelExpansionsWithFunctionPointerType,
        TopLevelExpansionsToStringLiteral,
        TransformationLocationNotRewritable,
        TopLevelExpansionsThatWriteToRValueFromSymbolInArgument,
        TopLevelExpansionsThatReadFromLValueFromSymbolInArgument,
        EmittedOLMDefinitions,
        EmittedFLMDefinitions,
        DedupedOLMDefinitions,
        DedupedFLMDefinitions,
        TopLevelUnhygienicExpansions,
        UnhygienicOLMs,
        UnhygienicFLMs,
        OLMsWithLocalVarsInBody,
        FLMsWithLocalVarsInBody,
        HygienicExpansions,
        HygienicOLMExpansions,
        HygienicFLMExpansions,
        TransformedTopLevelExpansionsWithSideEffects,
        TransformedOLMExpansionsWithSideEffects,
        TransformedFLMExpansionsWithSideEffects};

    map<string, unsigned int> Stats;
    for (auto &&Header : CSVHeaders)
    {
        Stats.emplace(Header, 0);
    }
    return Stats;
}