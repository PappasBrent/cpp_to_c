grammar: |-
  BIN_PREFIX      := "0b" | "0B" ;
  BIN_DIGIT       := "0" | "1" ;
  BIN_NUMBER      := BIN_PREFIX, BIN_DIGIT, {BIN_DIGIT} ;

  OCTAL_PREFIX    := "0" ;
  OCTAL_DIGIT     := "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ;
  OCTAL_NUMBER    := OCTAL_PREFIX, OCTAL_DIGIT, {OCTAL_DIGIT} ;

  DEC_DIGIT       := "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9" ;
  DEC_NUM         := DIGIT, {DIGIT};

  HEX_PREFIX      := "0x" | "0X" ;
  HEX_DIGIT       := "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"|"a"|"b"|"c"|"d"|"e"|"f"|"A"|"B"|"C"|"D"|"E"|"F" ;
  HEX_NUMBER      := HEX_PREFIX, HEX_DIGIT, {HEX_DIGIT} ;

  (*
    Assume recognition uses short circuiting to avoid
    recognizing decimal numbers as octal numbers
  *)
  INTEGER         :=  BIN_NUMBER | OCTAL_NUMBER | DEC_NUM | HEX_NUMBER ;

  SIGN            :=  "+" | "-" ;
  EXPONENT        :=  ("e" | "E"), [SIGN], DEC_NUM ;
  FLOAT           :=  DEC_NUM, [EXPONENT] ;

  NUMBER          :=  INTEGER | FLOAT ;

  CHARACTER       := "a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"|"n"|"o"|"p"|"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z"|"A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|"M"|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z" ;
  CHAR_PREFIX     :=  "L" | "u" | "U" ;
  CHAR            := [CHAR_PREFIX], "'", CHARACTER, "'" ;

  CONSTANT        := NUMBER | CHAR ;

triads:
  - un-preprocessed: |-
      #define A_UPPER   U'A'
      #define A_LOWER   U'a'
      #define PI        3.14F
      #define ANSWER    42
      #define BLUE      0x00FU
      #define SPEED     3e+8

      int main(void) {
        char a_upper = A_UPPER;
        char a_lower = A_LOWER;
        float pi = PI;
        int answer = ANSWER;
        unsigned blue = BLUE;
        double speed = SPEED;
        return 0;
      }

    preprocessed: |-
      int main(void) {
        char a_upper = U'A';
        char a_lower = U'a';
        float pi = 3.14F;
        int answer = 42;
        unsigned blue = 0x00FU;
        double speed = 3e+8;
        return 0;
      }
    converted: |-
      // Both numeric and char constants can be parsed,
      // and their types inferred
      const char A_UPPER = U'A';
      const char A_LOWER = U'a';
      const float PI = 3.14F;
      const int ANSWER = 42;
      const unsigned BLUE = 0x00FU;
      const double SPEED = 3e+8;

      int main(void) {
        char a_upper = A_UPPER;
        char a_lower = A_LOWER;
        float pi = PI;
        int answer = ANSWER;
        unsigned blue = BLUE;
        double speed = SPEED;
        return 0;
      }

  - un-preprocessed: |-
      #define CASE_1 1
      #define CASE_2 2
      #define CASE_3 3
      #define CASE_4 4

      int main(int argc, char const *argv[])
      {
          int case_number = 1;

          switch (case_number)
          {
          case CASE_1:
          case CASE_2:
              break;

          case CASE_3:
              switch (case_number)
              {
              case CASE_1:
              case CASE_4:
                  break;

              default:
                  break;
              }

          default:
              break;
          }
          return 0;
      }

    preprocessed: |-
      int main(int argc, char const *argv[])
      {
          int case_number = 1;

          switch (case_number)
          {
          case 1:
          case 2:
              break;

          case 3:
              switch (case_number)
              {
              case 1:
              case 4:
                  break;

              default:
                  break;
              }

          default:
              break;
          }
          return 0;
      }
    converted: |-
      // Constants used as case labels are converted to enums,
      // since const variables cannot be used as case labels
      // in ANSI C.
      // Macros used as case labels in the same switch statement are
      // grouped into the same enum.
      // Macros that are used as case labels in multiple switch statements
      // are grouped the enum for the first switch statement they were used in.
      enum SWITCH_0_CASES { CASE_1 = 1, CASE_2 = 2, CASE_3 = 3};

      enum SWITCH_1_CASES { CASE_4 = 4};

      int main(int argc, char const *argv[])
      {
          int case_number = 1;

          switch (case_number)
          {
          case CASE_1:
          case CASE_2:
              break;

          case CASE_3:
              switch (case_number)
              {
              case CASE_1:
              case CASE_4:
                  break;

              default:
                  break;
              }

          default:
              break;
          }
          return 0;
      }
