grammar: |-
  CHARACTER   := "a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"|"n"|"o"|"p"|"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z"|"A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|"M"|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z" ;
  CHAR_PREFIX :=  "L" | "u" | "U" ;
  CHAR        := [CHAR_PREFIX], "'", CHARACTER, "'" ;
  DIGIT       := "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9" ;
  INTEGER     := DIGIT, {DIGIT} ;
  CONSTANT    := INTEGER | CHAR ;

triads:
  - un-preprocessed: |-
      #define SIXTY_FIVE 65
      #define A 'A'

      int main(void) {
        int ascii_value = SIXTY_FIVE;
        char character_value = A;
        return 0;
      }
    preprocessed: |-
      int main(void) {
        int ascii_value = 65;
        char character_value = 'A';
        return 0;
      }
    converted: |-
      const int SIXTY_FIVE = 65;
      const char A = 'A';

      int main(void) {
        int ascii_value = SIXTY_FIVE;
        char character_value = A;
        return 0;
      }

  - un-preprocessed: |-
      #define SIXTY_FIVE 65
      #define A u'A'

      int main(void) {
        int ascii_value = A;
        char character_value = SIXTY_FIVE;
        return 0;
      }
    preprocessed: |-
      int main(void) {
        int ascii_value = u'A';
        char character_value = 65;
        return 0;
      }
    converted: |-
      // SIXTY_FIVE and A are converted to an int and u char,
      // respectively, even though they are used in the AST
      // a char and int, respectively. This is because their
      // bodies parse to int and u char, respectively.
      const int SIXTY_FIVE = 65;
      const char A = u'A';

      int main(void) {
        int ascii_value = A;
        char character_value = SIXTY_FIVE;
        return 0;
      }
