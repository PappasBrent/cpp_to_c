grammar: |-
  DEC_DIGIT :=  "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9" ;
  DEC_NUM   :=  DEC_DIGIT, {DEC_DIGIT} ;

  SIGN      :=  "+" | "-" ;
  EXPONENT  :=  ("e" | "E"), [SIGN], DEC_NUM ;
  FLOAT     :=  DEC_NUM, [EXPONENT] ;

triads:

  - un-preprocessed: |-
      #define A 1e2

      int main(void) {
        float x = A;
        return 0;
      }
    preprocessed: |-
      int main(void) {
        float x = 1e2;
        return 0;
      }
    converted: |-
      const float A = 1e2;

      int main(void) {
        float x = A;
        return 0;
      }

  - un-preprocessed: |-
      #define A 1e+5
      #define B 1E+10

      int main(void) {
        float x = A;
        float y = B;
        return 0;
      }
    preprocessed: |-
      int main(void) {
        float x = 1e+5;
        float y = 1E+10;
        return 0;
      }
    converted: |-
      const float A = 1e+5;
      const float B = 1e+10;

      int main(void) {
        float x = A;
        float y = B;
        return 0;
      }

  - un-preprocessed: |-
      #define A 1e-5
      #define B 1E-10

      int main(void) {
        float x = A;
        float y = B;
        return 0;
      }
    preprocessed: |-
      int main(void) {
        float x = 1e-5;
        float y = 1E-10;
        return 0;
      }
    converted: |-
      const float A = 1e-5;
      const float B = 1e-10;

      int main(void) {
        float x = A;
        float y = B;
        return 0;
      }
