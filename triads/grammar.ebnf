start                       =   translation_unit;

translation_unit            =   [external_declaration_list], main;

external_declaration_list   =   external_declaration, [external_declaration_list];

external_declaration        =   declaration
                            |   function_definition;

declaration                 =   declaration_specs, [init_declarator_list], ';';

(*
Note: This grammar imposes greater retrictions on the ordering of
declaration specifiers than C99 or ASNI C standards.
This makes the grammar easier to reason about, but will
have to be changed eventually to be less restrictive.

This production only allows for one storage class specifier since only
one makes sense anyway.

This production only allows for a single type qualifer (which could be a
combination of C's two type qualifiers; see the correpsonding production)
on a declarator, since even though a redundant application of the same
qualifier is technically legal C, it parses to the same thing as using
that qualifier only once.
*)
declaration_specs           =   [storage_class_specifier], [type_qualifier], type_spec;

storage_class_specifier     =   'typedef' | 'extern' | 'static' | 'auto' | 'register';

(* Includes all combinations of C's type qualifiers. *)
type_qualifier              =   'const', ['volatile'] | 'volatile', ['const'];

type_specifier              =   ? any c primitive type, or in the
                                  case of a typedef,
                                  the name of the defined type ?;

init_declarator_list        =   init_declarator, [',', init_declarator_list];

init_declarator             =   declarator, ['=', initializer];

declarator                  =   [pointer], direct_declarator;

pointer                     =   '*' [[type_qualifier], pointer];

direct_declarator           =   identifier;

identifier                  =   ? any valid C identifier ?;

initializer                 =   assignment_expression;

assignment_expression       =   conditional_expression
                            |   {pointer}, identifier, assignment_operator, assignment_expression;

assignment_operator         =   ? any c operator concatenated with '=' ?;

conditional_expression      =   logical_or_expression, ['?', expression, ':', conditional_expression];

logical_or_expression       =   [logical_or_expression, '||'], logical_and_expression;

logical_and_expression      =   [logical_and_expression, '&&'], inclusive_or_expression;

inclusive_or_expression     =   [inclusive_or_expression, '|'], exclusive_or_expression;

exclusive_or_expression     =   [exclusive_or_expression, '^'], and_expression;

and_expression              =   [and_expression, '&'], equality_expression;

equality_expression         =   [equality_expression, ('==' | '!=')], relational_expression;

relational_expression       =   [relational_expression, ('<' | '>' | '<=' | '>=')], shift_expression;

shift_expression            =   [shift_expression, ('<<' | '>>')], additive_expression;

additive_expression         =   [additive_expression, ('+' | '-')], multiplicative_expression;

multiplicative_expression   =   [multiplicative_expression, ('*' | '/' | '%')], cast_expression;

cast_expression             =   unary_expression
                            |   '(', type_specifier, ')', cast_expression;

unary_expression            =   postfix_expression
                            |   ('++' | '--' | 'sizeof'), unary_expression
                            |   ('&' | '*' | '+' | '~' | '-' | '!'), cast_expression
                            |   'sizeof', '(', type_specifier, ')';

postfix_expression          =   primary_expression
                            |   postfix_expression, ('++' | '--')
                            |   identifier, '(', [argument_expression_list], ')';

argument_expression_list    =   assignment_expression, [',', argument_expression_list];

primary_expression          =   identifier
                            |   constant
                            |   string_literal
                            |   '(', expression, ')';

constant                    =   ? any valid C numeric literal value ?;

string_literal              =   ? any valid C string literal ?;

function_definition         =   declaration_specs, declarator, parameter_list, compound_statement;

parameter_list              =   ? a valid list of function parameters ?;

(*
Note: This production rule for compound statements specifies that a
compound statement may not contain a mix of declarations and statements.
This is in strict adherence to ANSI C / C89 standards.
*)
compound_statement          =   '{', declaration_list, '}'
                            |   '{', statement_list, '}'
                            |   '{', declaration_list, statement_list, '}';

statement_list              =   statement, [statement_list];

statement                   =   expression_statement
                            |   jump_statement;

expression_statement        =   [expression], ';';

expression                  =   [expression, ','], assignment_expression;

jump_statement              =   'return', [expression], ';';

main                        =   'int main(void)', compound_statement;
