start                       =   translation_unit;

translation_unit            =   [external_declaration_list], main;

external_declaration_list   =   external_declaration, [external_declaration_list];

external_declaration        =   declaration
                            |   function_definition;

declaration                 =   declaration_specs, [init_declarator_list], ';';

(*
Note: This grammar imposes greater retrictions on the number of
declaration specifiers than C99 or ASNI C standards.
This makes the grammar easier to reason about, but will
have to be changed eventually to be less restrictive.

This production only allows for at most one storage class specifier since
legal C declarations contain at most one storage class specifier.

This production only allows for at most one type qualifer (which could be a
combination of C's two type qualifiers; see the correpsonding production rule)
on a declarator, since even though a redundant application of the same
qualifier is technically legal C, it parses to the same thing as using
that qualifier only once.

Functions/variables/typedefs whose declaration specifiers lack a type_specifier
nonterminal default to the `int` type specifier.
*)
declaration_specs           =   storage_class_specifier
                            |   storage_class_specifier, type_qualifier
                            |   storage_class_specifier, type_qualifier, type_spec
                            |   storage_class_specifier, type_spec
                            |   storage_class_specifier, type_spec, type_qualifier
                            |   type_qualifier
                            |   type_qualifier, storage_class_specifier
                            |   type_qualifier, storage_class_specifier, type_spec
                            |   type_qualifier, type_spec
                            |   type_qualifier, type_spec, storage_class_specifier
                            |   type_spec
                            |   type_spec, storage_class_specifier
                            |   type_spec, storage_class_specifier, type_qualifier
                            |   type_spec, type_qualifier
                            |   type_spec, type_qualifier, storage_class_specifier;

storage_class_specifier     =   'typedef' | 'extern' | 'static' | 'auto' | 'register';

(* Includes all combinations of C's type qualifiers. *)
type_qualifier              =   'const', ['volatile'] | 'volatile', ['const'];

type_specifier              =   ? any c primitive type or defined type ?;

init_declarator_list        =   init_declarator, [',', init_declarator_list];

init_declarator             =   declarator, ['=', initializer];

declarator                  =   [pointer], direct_declarator;

pointer                     =   '*' [[type_qualifier], pointer];

direct_declarator           =   identifier;

identifier                  =   ? any valid C identifier ?;

initializer                 =   assignment_expression;

assignment_expression       =   conditional_expression
                            |   {pointer}, identifier, assignment_operator, assignment_expression;

assignment_operator         =   ? any c operator concatenated with '=' ?;

conditional_expression      =   logical_or_expression, ['?', expression, ':', conditional_expression];

logical_or_expression       =   [logical_or_expression, '||'], logical_and_expression;

logical_and_expression      =   [logical_and_expression, '&&'], inclusive_or_expression;

inclusive_or_expression     =   [inclusive_or_expression, '|'], exclusive_or_expression;

exclusive_or_expression     =   [exclusive_or_expression, '^'], and_expression;

and_expression              =   [and_expression, '&'], equality_expression;

equality_expression         =   [equality_expression, ('==' | '!=')], relational_expression;

relational_expression       =   [relational_expression, ('<' | '>' | '<=' | '>=')], shift_expression;

shift_expression            =   [shift_expression, ('<<' | '>>')], additive_expression;

additive_expression         =   [additive_expression, ('+' | '-')], multiplicative_expression;

multiplicative_expression   =   [multiplicative_expression, ('*' | '/' | '%')], cast_expression;

cast_expression             =   unary_expression
                            |   '(', type_specifier, ')', cast_expression;

unary_expression            =   postfix_expression
                            |   ('++' | '--' | 'sizeof'), unary_expression
                            |   ('&' | '*' | '+' | '~' | '-' | '!'), cast_expression
                            |   'sizeof', '(', type_specifier, ')';

postfix_expression          =   primary_expression
                            |   postfix_expression, ('++' | '--')
                            |   identifier, '(', [argument_expression_list], ')';

argument_expression_list    =   assignment_expression, [',', argument_expression_list];

primary_expression          =   identifier
                            |   constant
                            |   string_literal
                            |   '(', expression, ')';

constant                    =   ? any valid C numeric literal value ?;

string_literal              =   ? any valid C string literal ?;

function_definition         =   declaration_specs, declarator, parameter_list, compound_statement;

parameter_list              =   ? a valid list of function parameters ?;

(*
Note: This production rule for compound statements specifies that a
compound statement may not contain a mix of declarations and statements.
This is in strict adherence to ANSI C / C89 standards.
*)
compound_statement          =   '{', declaration_list, '}'
                            |   '{', statement_list, '}'
                            |   '{', declaration_list, statement_list, '}';

statement_list              =   statement, [statement_list];

statement                   =   labeled_statement
                            |   compound_statement
                            |   expression_statement
                            |   selection_statement
                            |   iteration_statement
                            |   jump_statement;

labeled_statement           =   (identifier | 'case', const, constant_expression | 'default'), ':', statement;

constant_expression         =   conditional_expression;

expression_statement        =   [expression], ';';

expression                  =   assignment_expression, [',', expression];

selection_statement         =   'if', '(', expression, ')', statement, ['else', statement]
                            |   'switch', '(', expression, ')', statement;

iteration_statement         =   'while', '(', expression, ')', statement
                            |   'do', statement, 'while', '(', expression, ')', ';'
                            |   'for', '(', expression_statement, expression_statement, [expression], ')', statement;

jump_statement              =   'return', [expression], ';';

main                        =   'int main(void)', compound_statement;
