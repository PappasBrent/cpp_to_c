triads:
  - un-preprocessed: |-
      #define DYN_X x

      int main(void) {
        int x = 1;
        int y, z;
        y = DYN_X;
        z = DYN_X;
        return 0;
      }
    preprocessed: |-
      int main(void) {
        int x = 1;
        int y, z;
        y = x;
        z = x;
        return 0;
      }
    converted: |-
      int DYN_X(int x) { return x; }

      int main(void) {
        int x = 1;
        int y, z;
        y = DYN_X(x);
        z = DYN_X(x);
        return 0;
      }

    comments: |-
      A macro whose body is a free variable that does not suffer from
      side-effects is converted to a function which includes the free variable
      in its parameter list, and returns the value of that free variable.

      All invocations of the macro are replaced with calls to the function,
      with the free variable passed as an argument each time.

  - un-preprocessed: |-
      #define COPY_VAR(var) var

      int main(void) {
        int z = 1;
        int x = COPY_VAR(z);
        return 0;
      }
    preprocessed: |-
      int main(void) {
        int z = 1;
        int x = z;
        return 0;
      }
    converted: |-
      int COPY_VAR(int var) { return var; }

      int main(void) {
        int z = 1;
        int x = COPY_VAR(z);
        return 0;
      }
    comments: |-
      A function-like macro whose body is a parameter that does not
      suffer from side-effects is converted to a function which includes the
      parameter in its parameter list, and returns the value of that parameter.

      All invocations of the macro are left as-is, since they follow the
      same production rules as function calls.

  - un-preprocessed: |-
      int times_two(int x) { return x*2; }

      #define TIMES_TWO times_two

      int int main(void) {

        int x = TIMES_TWO(1);
        
        return 0;
      }
    preprocessed: |-
      int times_two(int x) { return x*2; }
      int int main(void) {
        int x = times_two(1);
        return 0;
      }
    converted: |-
      int times_two(int x) { return x*2; }

      int TIMES_TWO(int x) { return times_two(x); }

      int int main(void) {

        int x = TIMES_TWO(1);
        
        return 0;
      }
    comments: |-
      A macro whose body is the identifier of a function is converted
      to a function with the same parameters as the function
      in its body, and returns a call to that function.

      Technically, this conversion could also be implemented by
      converting the macro to a function that returns the function
      it is aliasing.
      We do not do this because functions in C are
      [not really first class citizens](https://stackoverflow.com/a/48092241/6824430),
      and this would not be in compliance with section 6.7.5.3, constraint 1 of
      [ISO/IEC 9899:TC3](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf).
