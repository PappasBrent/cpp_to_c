grammar: |-
  CAST_EXPRESSION           :=  ? CAST_EXPRESSION as defined in cast_expressions.yaml ? ;
  MULTIPLICATIVE_EXPRESSION :=  CAST_EXPRESSION
                            |   MULTIPLICATIVE_EXPRESSION, '*', CAST_EXPRESSION
                            |   MULTIPLICATIVE_EXPRESSION, '/', CAST_EXPRESSION
                            |   MULTIPLICATIVE_EXPRESSION, '%', CAST_EXPRESSION ;

triads:
  - un-preprocessed: |-
      #define FOUR 2 * 2

      int main(void)
      {
          int four = FOUR;
          return 0;
      }

    preprocessed: |-
      int main(void)
      {
          int four = 2 * 2;
          return 0;
      }
    converted: |-
      // Multiplicative expressions that only involve constants
      // are converted to constant expressions.
      int FOUR = 2 * 2;

      int main(void)
      {
          int four = FOUR;
          return 0;
      }

  - un-preprocessed: |-
      #define HASH(x) x % n
      int main(void) {
        unsigned long n = 10;
        int i = HASH(17);
        return 0;
      }
    preprocessed: |-
      int main(void) {
        unsigned long n = 10;
        int i = 17 % n;
        return 0;
      }
    converted: |-
      // A few notes here:
      // 1) Function-like macros are converted to functions.
      // 2) For expressions involving variables of multiple numeric types,
      //    the return type is determined based upon the types of the
      //    variables involved and follows the C type hierarchy.
      // 3) Free variables are added to the parameter list of converted
      // macros.
      unsigned long HASH(int x, unsigned long n) { return x % n; }
      int main(void)
      {
          unsigned long n = 10;
          int i = HASH(17, n);
          return 0;
      }
