triads:
  - un-preprocessed: |-
      #define SWAP(x, y)  \
        do                \
        {                 \
          int temp = x;   \
          x = y;          \
          y = temp;       \
        } while (0)

      int main(void) {
        int x = 5;
        int y = 10;
        SWAP(x, y);
        return 0;
      }
    preprocessed: |-
      int main(void) {
        int x = 5;
        int y = 10;
        do { int temp = x; x = y; y = temp; } while (0);
        return 0;
      }
    converted: |-
      void SWAP(int *x, int *y)
      {
          {
            int temp = (*x);
            (*x) = (*y);
            (*y) = temp;
          }
      }

      int main(void) {
        int x = 5;
        int y = 10;
        SWAP(&x, &y);
        return 0;
      }
    comments: |-
      A macro whose body is a do-while loop whose condition is zero
      is converted to a void function, whose compound statement component
      is populated with the do-while's statement component.

      Macro parameters and free variables that suffer from side-effects
      are handled in the usual way by converting them to references,
      and passing them by reference at macro invocation sites.

      It is a common idiom for macro writers to create do-while loops with
      0 as the condition.
      Macro writers do this when they want a macro to execute a statement,
      but don't want it to "swallow the semicolon" at the end of the line
      when it is invoked.

      Converting a macro to a function with side-effects accomplishes
      the same task, and also ensures that the semicolon will not be
      swallowed.
