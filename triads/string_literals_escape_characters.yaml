grammar: |-
  ANY             := ? any single character ? ;
  STRING_LITERAL  := '"', {("\", ANY) | (ANY - ("\" | '"')) }, '"' ;

triads:
  - un-preprocessed: |-
      #include <stdio.h>
      #define ESCAPED_STRING "String\nwith\nnewline\ncharacters"

      int main(void) {
        printf(ESCAPED_STRING);
        return 0;
      }
    preprocessed: |-
      int main(void) {
        printf("String\nwith\nnewline\ncharacters");
        return 0;
      }
    converted: |-
      #include <stdio.h>
      #const char *ESCAPED_STRING = "String\nwith\nnewline\ncharacters";
      int main(void) {
        printf(ESCAPED_STRING);
        return 0;
      }

  - un-preprocessed: |-
      #define CONTAINS_QUOTES "This is a \"string\" with \"quotes\" in it"

      int main(void) {
        char *s = CONTAINS_QUOTES;
        return 0;
      }
    preprocessed: |-
      int main(void) {
        char *s = "This is a \"string\" with \"quotes\" in it";
        return 0;
      }
    converted: |-
      const char *CONTAINS_QUOTES = "This is a \"string\" with \"quotes\" in it"

      int main(void) {
        char *s = CONTAINS_QUOTES;
        return 0;
      }

  - un-preprocessed: |-
      #define MALFORMED "\\""

      int main(void) {
        char *s = MALFORMED;
        return 0;
      }
    preprocessed: |-
      Does not preprocess
    converted: |-
      // The macro is not transformed because its string does not
      // follow the grammar
      #define MALFORMED "\"

      int main(void) {
        char *s = MALFORMED;
        return 0;
      }
