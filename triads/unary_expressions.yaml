# TODO: Add non-nullary functions and array indexing once expression
#       grammars are complete.

# TODO: Add sizeof(typename) rules once constant expression grammars
#       are complete

grammar: |-
  POSTFIX_EXPRESSION        :=  ? POSTFIX_EXPRESSION as defined in postfix_expressions.yaml" ? ;

  UNARY_OP                  :=  '&' | '*' | '+' | '-' | '~' | '!' ;

  UNARY_EXPRESSION          :=  POSTFIX_EXPRESSION
                            |   (INC_OP | DEC_OP), UNARY_EXPRESSION
                            |   UNARY_OP, UNARY_EXPRESSION
                            |   "sizeof", UNARY_EXPRESSION ;

triads:
  - un-preprocessed: |-
      #define NEG_ONE -1

      int main(int argc, char const *argv[])
      {
          int x = NEG_ONE;
          return 0;
      }

    preprocessed: |-
      int main(int argc, char const *argv[])
      {
          int x = -1;
          return 0;
      }
    converted: |-
      // Unary expressions that are applied constants to are
      // converted how the constant would be converted.
      const int NEG_ONE = -1;

      int main(int argc, char const *argv[])
      {
          int x = NEG_ONE;
          return 0;
      }

  - un-preprocessed: |-
      #include <stdio.h>
      #define INC_X ++x
      #define DEC_X --x

      int main(void) {
        int x = 10;
        INC_X;
        printf("%d\n", x);
        DEC_X;
        printf("%d\n", x);
        return 0;
      }
    preprocessed: |-
      int main(void) {
        int x = 10;
        ++x;
        printf("%d\n", x);
        --x;
        printf("%d\n", x);
        return 0;
      }
    converted: |-
      #include <stdio.h>

      // Macros whose bodies include free variables are converted to functions,
      // and free variables that suffer from side effects are converted to
      // pass-by-reference parameters.
      // Dereferences are enclosed in parentheses.
      // The macros are converted to return int values because their
      // bodies parse to int values.
      int INC_X(int *x) { return ++(*x); }
      int DEC_X(int *x) { return --(*x); }

      int main(void) {
        int x = 10;
        // Macro invocations are converted to function calls, and any
        // variables who suffer from side-effects will have references to them
        // passed to the function instead
        INC_X(&x);
        printf("%d\n", x);
        DEC_X(&x);
        printf("%d\n", x);
        return 0;
      }

  - un-preprocessed: |-
      #define SIZE_OF_A sizeof a

      int main(void)
      {
          int a = 1;
          unsigned long x = SIZE_OF_A;
          return 0;
      }
    preprocessed: |-
      int main(void)
      {
          int a = 1;
          unsigned long x = sizeof a;
          return 0;
      }
    converted: |-
      # sizeof expressions that include free variables are converted to
      # functions that return unsigned long values
      unsigned long SIZE_OF_A(int a) { return sizeof a;}

      int main(void)
      {
          int a = 1;
          # Macro invocations are converted to function calls
          unsigned long x = SIZE_OF_A(a);
          return 0;
      }
